@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService



@if(country is null)
{
    <p>Cargando ...</p>
}
else{
    <h3>@country.Name</h3>

    <div class="mb-3">
        <a class="btn btn-primary " href="/states/create/@country.Id"> Nuevo Estado</a>
        <a class="btn btn-success " href="/countries"> Regresar</a>
    </div>

    <GenericList MyList="state">
        <Loading>
            <p>Cargando ...</p>
        </Loading>
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Estados</th>
                        <th>Ciudades</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var states in state!)
                    {
                        <tr>

                            <td>
                                @states.Name
                            </td>
                            <td>
                                @states.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@states.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@states.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(states.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>

    </GenericList>
}

@code {
    private Country? country;

    private List<State>? state;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await loadAsync();
    }

    private async Task loadAsync()
    {
        var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;

        }

        country = responseHttp.Response;
        state = country!.States!.ToList();
    }
    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });


        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/states/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();

                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await loadAsync();
    }
}
